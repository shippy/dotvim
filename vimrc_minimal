" Minimal vimrc
" Basics
set nocompatible

filetype on
filetype plugin on
filetype indent on
syntax on

" #Appearance
set number " Always show line numbers
set modelines=1
set scrolloff=7
set showcmd    " Shows incomplete command

try
  colorscheme ron
catch
endtry
" To keep styles after post-edit sourcing .vimrc
silent do ColorScheme
" Highlight current line without underlining it
set cursorline
" This line must follow background setting + redraw, otherwise it won't stick
hi CursorLine cterm=NONE ctermbg=8 ctermfg=NONE

" Behavior
set hidden            " Useful for auto setting hidden buffers
set ffs=unix,dos,mac
set noerrorbells
set novisualbell
set t_vb=
set timeoutlen=500
set splitbelow " New window goes below
set splitright " New windows goes right
set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.gif,*.psd,*.o,*.obj,*.min.js
set wildignore+=*/smarty/*,*/vendor/*,*/node_modules/*,*/.git/*,*/.hg/*,*/.svn/*,*/.sass-cache/*,*/log/*,*/tmp/*,*/build/*,*/ckeditor/*
set wildmode=longest:full,full

" " Swap and backup files
" if has('persistent_undo')
"   set undofile
"   set undolevels=10000
"   set undoreload=20000
"   " TODO: Create directory if it doesn't exist
"   if isdirectory('/tmp/undodir')
"     set undodir^=/tmp/undodir//
"   endif
" endif

" " TODO: Create directory if it doesn't exist
" set directory^=/tmp/swapdir//

" " TODO: Create directory if it doesn't exist
" if isdirectory('/tmp/bckpdir')
"   set backup
"   set backupdir^=/tmp/bckpdir//
" else
"   set nobackup
" endif
set backup
set backupcopy=yes,breakhardlink
set backupdir=./.bkp//,/tmp//
set directory=./.bkp//,/tmp//
" set nobackup
" set nowritebackup

" Tabs and indent
set tabstop=2 softtabstop=2 shiftwidth=2 " Default tab stops
set expandtab
set autoindent
set smartindent
if has("linebreak")
  try
    set breakindent
    let &showbreak = '↳ '
    let &breakat = " \t;:,])}"
    set cpo+=n
  catch /E518:/
    " Unknown option: breakindent
  endtry
endif

" #Searching
set gdefault   " Add the g flag to search/replace by default
set hlsearch
set ignorecase " Ignore case when searching
set smartcase  " Try and be smart about cases
set magic
nnoremap // :nohlsearch<cr>

" #Moving
set nostartofline     " Don't reset cursor to start of line when moving around
set whichwrap+=<,>,h,l,[,] " Wrap over end-of-line to next
set iskeyword+=_

nnoremap j gj
nnoremap k gk

nnoremap <CR> G
nnoremap <BS> gg

" Automatically leave insert mode after `updatetime` ms of inaction (Vimtips)
if has("autocmd")
  au CursorHoldI * stopinsert
  au InsertEnter * let updaterestore=&updatetime | set updatetime=20000
  au InsertLeave * let &updatetime=updaterestore
endif

" #Mappings
let mapleader ="\<Space>"
inoremap jj <ESC>

" Cribbed from @marcgg -- quick switch to previous file
nnoremap <Leader><Leader> :e#<CR>
nmap <leader>w :w!<cr>
nmap <leader>x :x<cr>
nmap fw :w!<cr>
command! W w !sudo tee % > /dev/null
nmap fq :q!<CR>

" Yank to end of line with Y
nnoremap Y y$

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" Remove F1 and Q mappings
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
nnoremap Q <nop>

" Edit various important files
nnoremap <leader>ev :tabedit $MYVIMRC<cr>

" Visual
let g:currentmode={ 'n' : 'Normal ', 
\ 'no' : 'N·Operator Pending ',
\ 'v' : 'Visual ',
\ 'V' : 'V·Line ',
\ '^V' : 'V·Block ',
\ 's' : 'Select ',
\ 'S': 'S·Line ',
\ '^S' : 'S·Block ',
\ 'i' : 'Insert ',
\ 'R' : 'Replace ',
\ 'Rv' : 'V·Replace ',
\ 'c' : 'Command ',
\ 'cv' : 'Vim Ex ',
\ 'ce' : 'Ex ',
\ 'r' : 'Prompt ',
\ 'rm' : 'More ',
\ 'r?' : 'Confirm ',
\ '!' : 'Shell ',
\ 't' : 'Terminal '}
function! ModeCurrent() abort
    let l:modecurrent = mode()
    " use get() -> fails safely, since ^V doesn't seem to register
    " 3rd arg is used when return of mode() == 0, which is case with ^V
    " thus, ^V fails -> returns 0 -> replaced with 'V Block'
    let l:modelist = toupper(get(g:currentmode, l:modecurrent, 'V·Block '))
    let l:current_status_mode = l:modelist
    return l:current_status_mode
endfunction
set laststatus=2
set statusline=
set statusline+=%<\
set statusline+=%-10{ModeCurrent()}
set statusline+=%-40f\
" Switch to right side
set statusline+=%=
"set statusline+=%l\ of
"set statusline+=\ %L\
"set statusline+=lines\
set statusline+=\ FileType:\ %y\
set statusline+=\(%-3p%%\)
